// mips_decode: a decoder for MIPS arithmetic instructions
//
// alu_op       (output) - control signal to be sent to the ALU
// writeenable  (output) - should a new value be captured by the register file
// rd_src       (output) - should the destination register be rd (0) or rt (1)
// alu_src2     (output) - should the 2nd ALU source be a register (0) or an immediate (1)
// except       (output) - set to 1 when we don't recognize an opdcode & funct combination
// control_type (output) - 00 = fallthrough, 01 = branch_target, 10 = jump_target, 11 = jump_register 
// mem_read     (output) - the register value written is coming from the memory
// word_we      (output) - we're writing a word's worth of data
// byte_we      (output) - we're only writing a byte's worth of data
// byte_load    (output) - we're doing a byte load
// lui          (output) - the instruction is a lui
// slt          (output) - the instruction is an slt
// addm         (output) - the instruction is an addm
// opcode        (input) - the opcode field from the instruction
// funct         (input) - the function field from the instruction
// zero          (input) - from the ALU
//

module mips_decode(alu_op, writeenable, rd_src, alu_src2, except, control_type,
                   mem_read, word_we, byte_we, byte_load, lui, slt, addm,
                   opcode, funct, zero);
    output [2:0] alu_op;
    output       writeenable, rd_src, alu_src2, except;
    output [1:0] control_type;
    output       mem_read, word_we, byte_we, byte_load, lui, slt, addm;
    input  [5:0] opcode, funct;
    input        zero;




    
    
    

	
    

    	wire inst_beq = opcode == `OP_BEQ;
    	wire inst_bne = opcode == `OP_BNE;
	wire inst_j = opcode == `OP_J;
	wire inst_jr = (opcode == `OP_OTHER0) && (funct == `OP0_JR);
	wire inst lui = opcode == `OP_LUI;
	wire inst_slt = (opcode == `OP_OTHER0) && (funct == `OP0_SLT);
	wire inst_lw = opcode == `OP_LW;
	wire inst_lbu = opcode == `OP_LBU;
	wire inst_sw = opcode == `OP_SW;
	wire inst_sb = opcode == `OP_SB;


    
    wire inst_add = (opcode == `OP_OTHER0) && (funct == `OP0_ADD);
    wire inst_sub = (opcode == `OP_OTHER0) && (funct == `OP0_SUB);
    wire inst_and = (opcode == `OP_OTHER0) && (funct == `OP0_AND);
    wire inst_or = (opcode == `OP_OTHER0) && (funct == `OP0_OR);
    wire inst_nor = (opcode == `OP_OTHER0) && (funct == `OP0_NOR);
    wire inst_xor = (opcode == `OP_OTHER0) && (funct == `OP0_XOR);
    
    wire inst_addi = opcode == `OP_ADDI;
    wire inst_andi = opcode == `OP_ANDI;
    wire inst_ori = opcode == `OP_ORI;
    wire inst_xori = opcode == `OP_XORI;

    assign writeenable = inst_add | inst_addi |  inst_sub | inst_and | inst_or | inst_xor | inst_ori | inst_andi | inst_xori | inst_nor;
    assign except = ~(inst_add | inst_addi |  inst_sub | inst_and | inst_or | inst_xor | inst_ori | inst_andi | inst_xori | inst_nor);
    
    or oA1(alu_op[0],inst_sub,inst_or,inst_xor,inst_ori,inst_xori);
    or oA2(alu_op[1],inst_add,inst_sub,inst_nor,inst_xor,inst_addi,inst_xori);
    or oA3(alu_op[2],inst_and,inst_or,inst_nor,inst_xor,inst_andi,inst_ori,inst_xori);
    
    assign rd_src = ~(opcode == `OP_OTHER0);
    assign alu_src2 = ~(opcode == `OP_OTHER0);
    


endmodule // mips_decode
